import type { Any, Mixed } from './types';
import ArrayType from './types/ArrayType';
import BooleanType from './types/primitives/BooleanType';
import InterfaceType from './types/InterfaceType';
import IntersectionType from './types/IntersectionType';
import LiteralType from './types/primitives/LiteralType';
import NullType from './types/primitives/NullType';
import NumberType from './types/primitives/NumberType';
import RegExpType from './types/RegExpType';
import StringType from './types/primitives/StringType';
import TupleType from './types/TupleType';
import UndefinedType from './types/primitives/UndefinedType';
import UnionType from './types/UnionType';
export type { InputOf, OutputOf, TypeOf } from './types';
declare const regExp: (pattern: RegExp) => RegExpType;
declare const array: <Of extends Mixed>(of: Of) => ArrayType<Of>;
declare const interfaceType: <Of extends {
    [key: string]: Any;
}>(of: Of) => InterfaceType<Of>;
declare const intersection: <Of extends [Any, ...Any[]]>(of: Of) => IntersectionType<[Mixed, Mixed, ...Mixed[]]>;
declare const tuple: <Of extends [Any, ...Any[]]>(of: Of) => TupleType<Of>;
declare const union: <Of extends [Mixed, Mixed, ...Mixed[]]>(of: Of) => UnionType<Of>;
declare const boolean: BooleanType;
declare const literal: <Of extends string | number | boolean>(of: Of) => LiteralType<Of>;
declare const nullType: NullType;
declare const number: NumberType;
declare const string: StringType;
declare const undefined: UndefinedType;
export { array, boolean, interfaceType as interface, intersection, literal, nullType as null, number, regExp, string, tuple, undefined, union, };
